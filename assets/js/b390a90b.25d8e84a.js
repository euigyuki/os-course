"use strict";(self.webpackChunkos_course=self.webpackChunkos_course||[]).push([[389],{8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var i=o(6540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},9654:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"coding-philosophy","title":"Coding Philosophy","description":"Writing clean, bug-resistant code saves you\u2014and your TAs\u2014hours of debugging. Here are core principles I recommend for all OS projects:","source":"@site/docs/coding-philosophy.md","sourceDirName":".","slug":"/coding-philosophy","permalink":"/os-course/docs/coding-philosophy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udee0\ufe0f Debugging Java in VSCode","permalink":"/os-course/docs/javadebugger"},"next":{"title":"Submit Your Best Joke!(Beta)","permalink":"/os-course/docs/jokes"}}');var t=o(4848),s=o(8453);const l={},r="Coding Philosophy",a={},d=[{value:"1. <strong>Keep Functions Small and Purposeful</strong>",id:"1-keep-functions-small-and-purposeful",level:2},{value:"2. Separate Logic Layers",id:"2-separate-logic-layers",level:2},{value:"3. Test Incrementally",id:"3-test-incrementally",level:2},{value:"4. Avoid Magic Constants",id:"4-avoid-magic-constants",level:2},{value:"5. Comment Intentionally",id:"5-comment-intentionally",level:2},{value:"6. Embrace Object-Oriented Design",id:"6-embrace-object-oriented-design",level:2},{value:"Benefits of OOP:",id:"benefits-of-oop",level:3},{value:"\ud83e\uddfc Avoid God Classes",id:"-avoid-god-classes",level:3},{value:"Final Thought on OOP",id:"final-thought-on-oop",level:3},{value:"7. Code for Future You",id:"7-code-for-future-you",level:2},{value:"8. Final Thought",id:"8-final-thought",level:2}];function c(e){const n={br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"coding-philosophy",children:"Coding Philosophy"})}),"\n",(0,t.jsx)(n.p,{children:"Writing clean, bug-resistant code saves you\u2014and your TAs\u2014hours of debugging. Here are core principles I recommend for all OS projects:"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"1-keep-functions-small-and-purposeful",children:["1. ",(0,t.jsx)(n.strong,{children:"Keep Functions Small and Purposeful"})]}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 One function = one job",(0,t.jsx)(n.br,{}),"\n","\u274c Avoid long functions that do too many things"]}),"\n",(0,t.jsx)(n.h2,{id:"2-separate-logic-layers",children:"2. Separate Logic Layers"}),"\n",(0,t.jsx)(n.h2,{id:"3-test-incrementally",children:"3. Test Incrementally"}),"\n",(0,t.jsx)(n.p,{children:"Don\u2019t write 300 lines before testing. Add one block at a time and test each one."}),"\n",(0,t.jsx)(n.h2,{id:"4-avoid-magic-constants",children:"4. Avoid Magic Constants"}),"\n",(0,t.jsx)(n.h2,{id:"5-comment-intentionally",children:"5. Comment Intentionally"}),"\n",(0,t.jsx)(n.p,{children:"Don\u2019t narrate every line \u2014 comment to explain why, not what."}),"\n",(0,t.jsx)(n.h2,{id:"6-embrace-object-oriented-design",children:"6. Embrace Object-Oriented Design"}),"\n",(0,t.jsx)(n.p,{children:"Use classes and objects to model real-world OS concepts:"}),"\n",(0,t.jsx)(n.h3,{id:"benefits-of-oop",children:"Benefits of OOP:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Encapsulation: group related data + behavior"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Reusability: avoid rewriting logic for every PA"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Abstraction: hide complex implementation details"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Maintainability: easier to read, extend, and debug"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-avoid-god-classes",children:"\ud83e\uddfc Avoid God Classes"}),"\n",(0,t.jsx)(n.p,{children:"A God class does everything and knows too much. If a class is longer than ~200 lines or manages multiple responsibilities, break it up."}),"\n",(0,t.jsx)(n.p,{children:"Use SRP (Single Responsibility Principle) \u2014 every class should do one thing well."}),"\n",(0,t.jsx)(n.h3,{id:"final-thought-on-oop",children:"Final Thought on OOP"}),"\n",(0,t.jsx)(n.p,{children:"\"If you're writing a memory manager, write a MemoryManager class.\"\nModel the OS like you're building your own \u2014 one object at a time."}),"\n",(0,t.jsx)(n.h2,{id:"7-code-for-future-you",children:"7. Code for Future You"}),"\n",(0,t.jsx)(n.p,{children:"Write code that your sleep-deprived self can understand the night before it\u2019s due \ud83d\ude05"}),"\n",(0,t.jsx)(n.h2,{id:"8-final-thought",children:"8. Final Thought"}),"\n",(0,t.jsx)(n.p,{children:"\u201cThe best code is the code you don\u2019t need to fix later.\u201d"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);