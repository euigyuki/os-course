"use strict";(self.webpackChunkos_course=self.webpackChunkos_course||[]).push([[389],{8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},9654:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"coding-philosophy","title":"Coding Philosophy","description":"Writing clean, bug-resistant code saves you\u2014and your TAs\u2014hours of debugging. Here are core principles I recommend for all OS projects:","source":"@site/docs/coding-philosophy.md","sourceDirName":".","slug":"/coding-philosophy","permalink":"/os-course/docs/coding-philosophy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udee0\ufe0f Debugging Java in VSCode","permalink":"/os-course/docs/javadebugger"},"next":{"title":"Submit Your Best Joke!(Beta)","permalink":"/os-course/docs/Jokes"}}');var s=o(4848),r=o(8453);const i={},a="Coding Philosophy",l={},c=[{value:"\ud83e\udde9 1. <strong>Keep Functions Small and Purposeful</strong>",id:"-1-keep-functions-small-and-purposeful",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"coding-philosophy",children:"Coding Philosophy"})}),"\n",(0,s.jsx)(n.p,{children:"Writing clean, bug-resistant code saves you\u2014and your TAs\u2014hours of debugging. Here are core principles I recommend for all OS projects:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"-1-keep-functions-small-and-purposeful",children:["\ud83e\udde9 1. ",(0,s.jsx)(n.strong,{children:"Keep Functions Small and Purposeful"})]}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 One function = one job",(0,s.jsx)(n.br,{}),"\n","\u274c Avoid long functions that do too many things"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Good\nvoid loadProcess() {\n  allocateMemory();\n  setPCBFields();\n  enqueueToScheduler();\n}\n```java\n\n\ud83d\udd01 2. Separate Logic Layers\n\nDefine:\n\nLow-level helpers: do one small thing (e.g., checkPageValid())\nHigh-level orchestrators: only call helpers (e.g., simulateMemoryAccess())\n\ud83e\uddea 3. Test Incrementally\n\nDon\u2019t write 300 lines before testing. Add one block at a time and test each one.\n\n\ud83d\udcdb 4. Avoid Magic Constants\n\nUse named constants for clarity and maintainability.\n\npublic static final int PAGE_SIZE = 4096; // \u2705 readable and reusable\n\ud83e\uddfc 5. Comment Intentionally\n\nDon\u2019t narrate every line \u2014 comment to explain why, not what.\n\n// Wait until the buffer has space before producing\nwhile (buffer.isFull()) {\n  wait();\n}\n\ud83e\uddd8 6. Code for Future You\n\nWrite code that your sleep-deprived self can understand the night before it\u2019s due \ud83d\ude05\n\n\ud83e\udde0 Final Thought\n\n\u201cThe best code is the code you don\u2019t need to fix later.\u201d\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);